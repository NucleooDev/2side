document.addEventListener('DOMContentLoaded', function() {
  // Mobile Menu Toggle
  const menuToggle = document.querySelector('.menu-toggle');
  const navLinks = document.querySelector('.nav-links');
  
  menuToggle.addEventListener('click', function() {
    navLinks.classList.toggle('active');
    this.querySelector('i').classList.toggle('fa-times');
    this.querySelector('i').classList.toggle('fa-bars');
  });

  // Smooth Scrolling for Anchor Links
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function(e) {
      e.preventDefault();
      
      const targetId = this.getAttribute('href');
      if (targetId === '#') return;
      
      const targetElement = document.querySelector(targetId);
      if (targetElement) {
        // Close mobile menu if open
        navLinks.classList.remove('active');
        menuToggle.querySelector('i').classList.remove('fa-times');
        menuToggle.querySelector('i').classList.add('fa-bars');
        
        window.scrollTo({
          top: targetElement.offsetTop - 80,
          behavior: 'smooth'
        });
      }
    });
  });

  // Navbar Scroll Effect
  const navbar = document.querySelector('.nav-gang');
  
  window.addEventListener('scroll', function() {
    if (window.scrollY > 100) {
      navbar.style.background = 'rgba(10, 10, 10, 0.95)';
      navbar.style.padding = '0.5rem 0';
    } else {
      navbar.style.background = 'rgba(10, 10, 10, 0.9)';
      navbar.style.padding = '1rem 0';
    }
  });

  // Product Data
  const products = [
    {
      id: 1,
      name: "Moletom Flores Ready",
      category: "hoodies",
      description: "Made Y2K Hoodie Streetwear",
      price: 180.00,
      image: "img/casaco%20flores.jpg",
      tag: "HOT"
    },
    {
      id: 2,
      name: "Camiseta Hellstar",
      category: "shirts",
      description: "Limited Edition",
      price: 149.99,
      image: "img/camisa.webp",
      tag: "NEW"
    },
    {
      id: 3,
      name: "Camiseta Chrome Hearts",
      category: "shirts",
      description: "Oversized Fit",
      price: 39.99,
      image: "img/chrome%20hearts.webp",
      tag: "LAST"
    },
    {
      id: 4,
      name: "Nike Tech Fleece",
      category: "hoodies",
      description: "Preta",
      price: 120.00,
      image: "img/nike.webp",
      tag: "NEW"
    },
    {
      id: 5,
      name: "Camiseta Hellstar",
      category: "shirts",
      description: "Preta",
      price: 89.99,
      image: "img/hell.webp",
      tag: "HOT"
    },
    {
      id: 6,
      name: "Touca Chrome Hearts",
      category: "accessories",
      description: "Touca",
      price: 99.99,
      image: "img/touca.webp",
      tag: "NEW"
    },
        {
      id: 7,
      name: "Denim Tears Hoodie Grey",
      category: "hoodies",
      description: "Cinza",
      price: 120.00,
      image: "img/casaco%20flores2.webp",
      tag: "NEW"
    },
        {
      id: 8,
      name: "Denim Tears Hoodie Pink",
      category: "hoodies",
      description: "Rosa",
      price: 120.00,
      image: "img/rosa.webp",
      tag: "HOT"
    },
    {
      id: 9,
      name: "Denim Tears Hoodie Red",
      category: "hoodies",
      description: "Vermelho",
      price: 120.00,
      image: "img/vermelho.webp",
      tag: "NEW"
    },
    {
      id: 10,
      name: "Denim Tears Hoodie Green",
      category: "hoodies",
      description: "Verde",
      price: 120.00,
      image: "img/verde.webp",
      tag: "LAST"
    },
    {
      id: 11,
      name: "Denim Tears Hoodie Orange",
      category: "hoodies",
      description: "Laranja",
      price: 120.00,
      image: "img/laranja.webp",
      tag: "NEW"
    },
    {
      id: 12,
      name: "Camiseta Hellstar",
      category: "shirts",
      description: "Vermelha",
      price: 89.99,
      image: "img/hellstar%20vermelha.webp",
      tag: "HOT"
    },
    {
      id: 13,
      name: "Camiseta Hellstar",
      category: "shirts",
      description: "Azul",
      price: 89.99,
      image: "img/azul.webp",
      tag: "NEW"
    },
        {
      id: 14,
      name: "Moletom Hellstar",
      category: "hoodies",
      description: "Preto",
      price: 129.99,
      image: "img/moletom.webp",
      tag: "NEW"
    },
        {
      id: 15,
      name: "Óculos Chrome Hearts",
      category: "accessories",
      description: "Oculos",
      price: 99.99,
      image: "img/oculos.webp",
      tag: "NEW"
    },
        {
      id: 16,
      name: "Calça Hellstar",
      category: "pants",
      description: "Cinza",
      price: 120.00,
      image: "img/calça.webp",
      tag: "LAST"
    },
  ];

  // Initialize Carousel
  const carouselTrack = document.querySelector('.carousel-track');
  
  // Render Products
  function renderProducts(productsToRender) {
    carouselTrack.innerHTML = '';
    
    productsToRender.forEach(product => {
      const productElement = document.createElement('div');
      productElement.className = 'carousel-slide';
      productElement.dataset.category = product.category;
      
      productElement.innerHTML = `
        <div class="drop-card">
          ${product.tag ? `<div class="drop-tag">${product.tag}</div>` : ''}
          <div class="drop-img">
            <img src="${product.image}" alt="${product.name}" loading="lazy">
          </div>
          <div class="drop-info">
            <h3>${product.name}</h3>
            <p>${product.description}</p>
            <div class="price">R$${product.price.toFixed(2)}</div>
            <button class="add-to-cart" data-id="${product.id}">ADD TO BAG</button>
          </div>
        </div>
      `;
      
      carouselTrack.appendChild(productElement);
    });
    
    // Reinitialize carousel functionality
    initCarousel();
    initAddToCart();
  }

  // Filter Products by Category
  const tabButtons = document.querySelectorAll('.tab-btn');
  
  tabButtons.forEach(button => {
    button.addEventListener('click', function() {
      // Update active tab
      tabButtons.forEach(btn => btn.classList.remove('active'));
      this.classList.add('active');
      
      const category = this.dataset.category;
      let filteredProducts = products;
      
      if (category !== 'all') {
        filteredProducts = products.filter(product => product.category === category);
      }
      
      renderProducts(filteredProducts);
    });
  });

  // Initialize Carousel Functionality
  function initCarousel() {
    const carouselContainer = document.querySelector('.carousel-container');
    const slides = Array.from(document.querySelectorAll('.carousel-slide'));
    const nextBtn = carouselContainer.querySelector('.next-btn');
    const prevBtn = carouselContainer.querySelector('.prev-btn');
    
    if (slides.length === 0) return;
    
    const slideWidth = slides[0].getBoundingClientRect().width;
    let currentPosition = 0;
    let visibleSlides = calculateVisibleSlides();
    
    // Set initial position
    updateCarousel();
    
    // Next button click
    nextBtn.addEventListener('click', function() {
      const maxPosition = -(slides.length - visibleSlides) * slideWidth;
      if (currentPosition > maxPosition) {
        currentPosition -= slideWidth;
        // Snap to end if we go too far
        if (currentPosition < maxPosition) currentPosition = maxPosition;
        updateCarousel();
      }
    });
    
    // Previous button click
    prevBtn.addEventListener('click', function() {
      if (currentPosition < 0) {
        currentPosition += slideWidth;
        // Snap to start if we go too far
        if (currentPosition > 0) currentPosition = 0;
        updateCarousel();
      }
    });
    
    // Update carousel position
    function updateCarousel() {
      carouselTrack.style.transform = `translateX(${currentPosition}px)`;
      
      // Disable buttons when at extremes
      prevBtn.disabled = currentPosition === 0;
      nextBtn.disabled = currentPosition <= -(slides.length - visibleSlides) * slideWidth;
    }
    
    // Calculate visible slides based on screen size
    function calculateVisibleSlides() {
      if (window.innerWidth < 768) {
        return 1;
      } else if (window.innerWidth < 1024) {
        return 2;
      } else {
        return 3;
      }
    }
    
    // Handle window resize
    window.addEventListener('resize', function() {
      visibleSlides = calculateVisibleSlides();
      updateCarousel();
    });
  }

  // Add to Cart Functionality
  function initAddToCart() {
    const addToCartButtons = document.querySelectorAll('.add-to-cart');
    const cartBtn = document.querySelector('.cart-btn .cart-count');
    let cartCount = 0;
    
    addToCartButtons.forEach(button => {
      button.addEventListener('click', function() {
        const productId = this.dataset.id;
        const product = products.find(p => p.id == productId);
        
        // Animation
        this.textContent = 'ADDED!';
        this.style.backgroundColor = '#25D366';
        this.style.borderColor = '#25D366';
        
        // Update cart
        cartCount++;
        cartBtn.textContent = cartCount;
        cartBtn.style.animation = 'none';
        void cartBtn.offsetWidth; // Trigger reflow
        cartBtn.style.animation = 'bounce 0.5s';
        
        // Add to cart logic would go here
        console.log(`Added to cart: ${product.name}`);
        
        // Reset button after delay
        setTimeout(() => {
          this.textContent = 'ADD TO BAG';
          this.style.backgroundColor = '';
          this.style.borderColor = '';
        }, 2000);
      });
    });
  }

  // Newsletter Form
  const newsletterForm = document.getElementById('newsletterForm');
  if (newsletterForm) {
    newsletterForm.addEventListener('submit', function(e) {
      e.preventDefault();
      const emailInput = this.querySelector('input');
      const messageElement = this.nextElementSibling;
      
      // Simulate form submission
      emailInput.value = '';
      messageElement.textContent = 'Obrigado por assinar nossa newsletter!';
      messageElement.style.color = '#25D366';
      
      setTimeout(() => {
        messageElement.textContent = '';
      }, 3000);
    });
  }

  // Mini Cart Functionality
  const cartBtn = document.querySelector('.cart-btn');
  const miniCart = document.querySelector('.mini-cart-modal');
  const overlay = document.querySelector('.overlay');
  const closeCart = document.querySelector('.close-cart');
  
  cartBtn.addEventListener('click', function(e) {
    e.preventDefault();
    miniCart.classList.add('active');
    overlay.classList.add('active');
  });
  
  closeCart.addEventListener('click', function() {
    miniCart.classList.remove('active');
    overlay.classList.remove('active');
  });
  
  overlay.addEventListener('click', function() {
    miniCart.classList.remove('active');
    this.classList.remove('active');
  });

  // Initialize the page with all products
  renderProducts(products);
});
// Adicione estas variáveis no início do seu JS
let cartItems = [];
let cartTotal = 0;

// Modifique a função initAddToCart
function initAddToCart() {
  const addToCartButtons = document.querySelectorAll('.add-to-cart');
  const cartBtn = document.querySelector('.cart-btn .cart-count');
  
  addToCartButtons.forEach(button => {
    button.addEventListener('click', function() {
      const productId = parseInt(this.dataset.id);
      const product = products.find(p => p.id === productId);
      
      // Adiciona ao carrinho
      addToCart(product);
      
      // Animation
      this.textContent = 'ADDED!';
      this.style.backgroundColor = '#25D366';
      this.style.borderColor = '#25D366';
      
      // Update cart count
      updateCartCount();
      
      // Reset button after delay
      setTimeout(() => {
        this.textContent = 'ADD TO BAG';
        this.style.backgroundColor = '';
        this.style.borderColor = '';
      }, 2000);
    });
  });
}

// Adicione estas novas funções
function addToCart(product) {
  const existingItem = cartItems.find(item => item.id === product.id);
  
  if (existingItem) {
    existingItem.quantity += 1;
  } else {
    cartItems.push({
      ...product,
      quantity: 1
    });
  }
  
  cartTotal += product.price;
  updateMiniCart();
}

function updateCartCount() {
  const cartCount = cartItems.reduce((total, item) => total + item.quantity, 0);
  const cartBtn = document.querySelector('.cart-btn .cart-count');
  cartBtn.textContent = cartCount;
  
  // Animation
  cartBtn.style.animation = 'none';
  void cartBtn.offsetWidth; // Trigger reflow
  cartBtn.style.animation = 'bounce 0.5s';
}

function updateMiniCart() {
  const miniCartItems = document.querySelector('.mini-cart-items');
  const totalPriceElement = document.querySelector('.total-price');
  
  miniCartItems.innerHTML = '';
  
  cartItems.forEach(item => {
    const cartItemElement = document.createElement('div');
    cartItemElement.className = 'cart-item';
    cartItemElement.innerHTML = `
      <img src="${item.image}" alt="${item.name}" class="cart-item-img">
      <div class="cart-item-info">
        <div class="cart-item-title">${item.name}</div>
        <div class="cart-item-price">R$${item.price.toFixed(2)}</div>
        <div class="cart-item-quantity">Qtd: ${item.quantity}</div>
        <div class="cart-item-remove" data-id="${item.id}">Remover</div>
      </div>
    `;
    miniCartItems.appendChild(cartItemElement);
  });
  
  totalPriceElement.textContent = `R$${cartTotal.toFixed(2)}`;
  
  // Adiciona event listeners para os botões de remover
  document.querySelectorAll('.cart-item-remove').forEach(button => {
    button.addEventListener('click', function() {
      const productId = parseInt(this.dataset.id);
      removeFromCart(productId);
    });
  });
}

function removeFromCart(productId) {
  const itemIndex = cartItems.findIndex(item => item.id === productId);
  
  if (itemIndex !== -1) {
    const item = cartItems[itemIndex];
    cartTotal -= item.price * item.quantity;
    
    if (item.quantity > 1) {
      item.quantity -= 1;
    } else {
      cartItems.splice(itemIndex, 1);
    }
    
    updateMiniCart();
    updateCartCount();
  }
}

// Adicione este código para controlar a abertura/fechamento do carrinho
const cartBtn = document.querySelector('.cart-btn');
const miniCart = document.querySelector('.mini-cart-modal');
const overlay = document.querySelector('.overlay');
const closeCart = document.querySelector('.close-cart');

cartBtn.addEventListener('click', function(e) {
  e.preventDefault();
  miniCart.classList.add('active');
  overlay.classList.add('active');
});

closeCart.addEventListener('click', function() {
  miniCart.classList.remove('active');
  overlay.classList.remove('active');
});

overlay.addEventListener('click', function() {
  miniCart.classList.remove('active');
  this.classList.remove('active');
});